################################################################## PREPROCESAMIENTO #######################################################################

## SHARES
## IDENTIFICACION DE MULTPLES SHARES ERRONEOS
DROP TABLE IF EXISTS Z_PREPROCESS_SHARES_SIN_DUPLICADO;
CREATE TABLE Z_PREPROCESS_SHARES_SIN_DUPLICADO (PRIMARY KEY (CAMPAIGN_ID,DONOR_ID)) AS
SELECT
	CONCAT(CAMPAIGN_ID,'-',DONOR_ID) AS CODIGO,
	A.*
FROM 
	SHARES A
INNER JOIN 
		(SELECT
			CODIGO,
			COUNT(*) CANTIDAD
		FROM
			(SELECT
		 		CONCAT(CAMPAIGN_ID,'-',DONOR_ID) AS CODIGO,
		 		B.*
		 	FROM 
		 		SHARES B) C
		GROUP BY CODIGO) D
ON CONCAT(A.CAMPAIGN_ID,'-',A.DONOR_ID) = D.CODIGO
WHERE 
	D.CANTIDAD = 1;

## ANALYTICS :  BOTS Y REFERRALS
	## BOT: SEPARACION DEL CAMPO 'DATA' E IDENTIFICACION DE BOTS

DROP TABLE IF EXISTS Z_PREPROCESS_ANALYTICS_;
CREATE TABLE Z_PREPROCESS_ANALYTICS_ AS
	SELECT
	*,
	SUBSTRING(DATA,LOCATE(':IP: ',DATA) + 5,LOCATE(':USER_AGENT: ',DATA) - (LOCATE(':IP: ',DATA) + 6)) AS IP,
	SUBSTRING(DATA,LOCATE(':USER_AGENT: ',DATA) + 13,LOCATE(':REFERRER:',DATA) - (LOCATE(':USER_AGENT: ',DATA) + 13 )) AS USER_AGENT,
	SUBSTRING(DATA,LOCATE(':COUNTRY_CODE:',DATA) + 14, 3 ) AS COUNTRY_CODE,
	SUBSTRING(DATA,LOCATE(':CITY:',DATA) + 6, LOCATE('    :ZIP_CODE:',DATA) - (LOCATE(':CITY:',DATA) + 6)) AS CITY
FROM 
	ANALYTICS;

DROP TABLE IF EXISTS Z_PREPROCESS_ANALYTICS__;
CREATE TABLE Z_PREPROCESS_ANALYTICS__ AS
	SELECT 
		*,
	CASE WHEN USER_AGENT LIKE '%BOT%' THEN 1 ELSE 0 END AS BOT
FROM Z_PREPROCESS_ANALYTICS_;

DROP TABLE IF EXISTS Z_PREPROCESS_ANALYTICS_SIN_BOTS;
CREATE TABLE Z_PREPROCESS_ANALYTICS_SIN_BOTS AS
SELECT
	*
FROM 
	Z_PREPROCESS_ANALYTICS__
WHERE 
	BOT = 0;

	##REFERRALS: IDENTIFICACION DE LA PAGINA DESDE DONDE INGRESO AL FORMULARIO

DROP TABLE IF EXISTS Z_PREPROCESS_ANALYTICS_CAT_REFERRAL_RAW;
CREATE TABLE Z_PREPROCESS_ANALYTICS_CAT_REFERRAL_RAW AS
SELECT
	A.*,
	C.NAME,
	C.SLUG AS ONG,
	C.WEBSITE AS LINK,
CASE 
	WHEN REFERRAL LIKE '%FACEBOOK%' THEN 'FACEBOOK'
	WHEN REFERRAL LIKE '%GOOGLE%' THEN 'GOOGLE'
	WHEN REFERRAL LIKE '%DONARONLINE%' THEN 'DONARONLINE'
	WHEN REFERRAL IS NULL THEN NULL 
	WHEN REFERRAL = C.WEBSITE THEN 'URL_ONG'
	WHEN REFERRAL LIKE CONCAT('%',C.SLUG,'%') THEN 'URL_ONG'
	WHEN REFERRAL LIKE CONCAT('%',LOWER(REPLACE(NAME,' ','')),'%') THEN 'URL_ONG'
	WHEN REFERRAL LIKE CONCAT('%',SUBSTR(C.WEBSITE,(LOCATE('HTTP://WWW.',C.WEBSITE) + 11),LOCATE('.ORG',C.WEBSITE)),'%') THEN 'URL_ONG'
	ELSE 'OTRO' 
	END CATEGORIA_REFERRAL
FROM 
	Z_PREPROCESS_ANALYTICS_SIN_BOTS A
LEFT JOIN 
	CAMPAIGNS B
ON A.CAMPAIGN_ID = B.ID
LEFT JOIN 
	ORGANIZATIONS C
ON B.ORGANIZATION_ID = C.ID;



# TAGGING: CATEGORIA ONG
DROP TABLE IF EXISTS Z_PREPROCESS_TAGS_NIVEL_ONG;
CREATE TABLE Z_PREPROCESS_TAGS_NIVEL_ONG (PRIMARY KEY(ORGANIZATION_ID)) AS
SELECT
	A.ID ORGANIZATION_ID,
	A.NAME ONG,
	COUNT(C.NAME) TAGS_ONG_Q_TAGS,
	SUM(CASE WHEN C.NAME = 'EDUCACION' THEN 1 ELSE 0 END) TAGS_EDUCACION,
	SUM(CASE WHEN C.NAME = 'NINEZ' THEN 1 ELSE 0 END) TAGS_NINEZ,
	SUM(CASE WHEN C.NAME = 'SALUD' THEN 1 ELSE 0 END) TAGS_SALUD,
	SUM(CASE WHEN C.NAME = 'POBREZA' THEN 1 ELSE 0 END) TAGS_POBREZA,
	SUM(CASE WHEN C.NAME = 'DERECHOS_HUMANOS' THEN 1 ELSE 0 END) TAGS_DDHH,
	SUM(CASE WHEN C.NAME = 'ASOCIACIONES' THEN 1 ELSE 0 END) TAGS_ASOCIACIONES,
	SUM(CASE WHEN C.NAME = 'VOLUNTARIADO' THEN 1 ELSE 0 END) TAGS_VOLUNTARIADO,
	SUM(CASE WHEN C.NAME = 'CAPACIDADES_ESPECIALES' THEN 1 ELSE 0 END) TAGS_CAPAC_ESPEC,
	SUM(CASE WHEN C.NAME = 'ARTE' THEN 1 ELSE 0 END) TAGS_ARTE,
	SUM(CASE WHEN C.NAME = 'MEDIO_AMBIENTE' THEN 1 ELSE 0 END) TAGS_MEDIO_AMBIENTE,
	SUM(CASE WHEN C.NAME = 'EMPLEO' THEN 1 ELSE 0 END) TAGS_EMPLEO,
	SUM(CASE WHEN C.NAME = 'DEPORTES' THEN 1 ELSE 0 END) TAGS_DEPORTES,
	SUM(CASE WHEN C.NAME = 'ANIMALES' THEN 1 ELSE 0 END) TAGS_ANIMALES,
	SUM(CASE WHEN C.NAME = 'MICROCREDITOS' THEN 1 ELSE 0 END) TAGS_MICROCREDITOS,
	SUM(CASE WHEN C.NAME = 'CIENCIA' THEN 1 ELSE 0 END) TAGS_CIENCIA,
	SUM(CASE WHEN C.NAME = 'RELIGION' THEN 1 ELSE 0 END) TAGS_RELIGION,
	SUM(CASE WHEN C.NAME = 'TECNOLOGIA' THEN 1 ELSE 0 END) TAGS_TECNO,
	SUM(CASE WHEN C.NAME = 'COOPERACION' THEN 1 ELSE 0 END) TAGS_COOPERACION,
	SUM(CASE WHEN C.NAME = 'GENERO' THEN 1 ELSE 0 END) TAGS_GENERO,
	SUM(CASE WHEN C.NAME = 'POLITICA' THEN 1 ELSE 0 END) TAGS_POLITICA,
	SUM(CASE WHEN C.NAME = 'VIVIENDA' THEN 1 ELSE 0 END) TAGS_VIVIENDA,
	SUM(CASE WHEN C.NAME = 'AGRICULTURA' THEN 1 ELSE 0 END) TAGS_AGRICULTURA,
	SUM(CASE WHEN C.NAME = 'CATASTROFE' THEN 1 ELSE 0 END) TAGS_CATASTROFE,
	SUM(CASE WHEN C.NAME = 'JUBILACION' THEN 1 ELSE 0 END) TAGS_JUBILACION
FROM 
	ORGANIZATIONS A
LEFT JOIN 
	TAGGINGS B
ON A.ID = B.TAGGABLE_ID
LEFT JOIN 
	TAGS C
ON C.ID = B.TAG_ID
GROUP BY 
	A.ID, A.NAME;

## DONORS: IDENTIFICACION DEL MISMO DONANTE Y CAMPOS NULL
	# IDENTIFICACION MISMO DONANTE
DROP TABLE IF EXISTS Z_PREPROCESS_DONORS_REPETIDOS;
CREATE TABLE Z_PREPROCESS_DONORS_REPETIDOS AS	
SELECT 
	*
FROM
	(SELECT
		A.*,
		CASE WHEN A.BIRTHDAY = B.BIRTHDAY AND A.CREATED_AT = B.CREATED_AT THEN 1 ELSE 0 END AS REPETIDO
	FROM 
		DONORS A
	LEFT JOIN
			    (SELECT
					*
				FROM
					(SELECT
						BIRTHDAY,
						CREATED_AT,
						COUNT(*) CANTIDAD
					FROM
					 	DONORS
					GROUP BY 
						BIRTHDAY, CREATED_AT
					HAVING COUNT(*)) A
				WHERE BIRTHDAY IS NOT NULL AND CANTIDAD > 1 ) B
ON A.BIRTHDAY = B.BIRTHDAY 
AND A.CREATED_AT = B.CREATED_AT) AA
WHERE REPETIDO = 1;

	## NULLS
DROP TABLE IF EXISTS Z_PREPROCESS_DONOR;
	CREATE TABLE  Z_PREPROCESS_DONOR (PRIMARY KEY (ID)) AS
	SELECT
	ID,
	CASE WHEN STREET_ADDRESS = '  ' THEN NULL ELSE STREET_ADDRESS END AS STREET_ADDRESS,
	CASE WHEN CITY_ADDRESS = '  ' THEN NULL ELSE CITY_ADDRESS END AS CITY_ADDRESS,
	CASE WHEN STATE_ADDRESS = '  ' THEN NULL ELSE STATE_ADDRESS END AS STATE_ADDRESS,
	CASE WHEN ZIPCODE_ADDRESS = '  ' THEN NULL ELSE	ZIPCODE_ADDRESS END AS ZIPCODE_ADDRESS,
	CASE WHEN COUNTRY_ADDRESS = '  ' THEN NULL ELSE COUNTRY_ADDRESS END AS COUNTRY_ADDRESS,
	CASE WHEN OCCUPATION = '  ' THEN NULL ELSE OCCUPATION END AS OCCUPATION,
	GENDER,
	CASE WHEN PHONE = '  ' THEN NULL ELSE PHONE END AS PHONE,
	CASE WHEN CELLPHONE = '  ' THEN NULL ELSE CELLPHONE END AS CELLPHONE,
	BIRTHDAY,
	CREATED_AT,
	UPDATED_AT
FROM
	DONORS;
	
	
# DISTINCT CARD_METHODSFOR LEVELS IN MODEL
DROP TABLE IF EXISTS z_CARDS;
	CREATE TABLE  z_CARDS AS
SELECT
	DISTINCT(CARD_METHOD_ID) CARD
FROM
	PAYMENT_METHODS;
	



#############################################################   SURVIVAL ANALYSIS ##################################################################
## SNAPSHOTS
-- TRAIN
-- SET @SNAPSHOT_INICIO = TIMESTAMP('2017-10-31 23:59:59');
-- SET @SNAPSHOT = TIMESTAMP('2018-01-31 23:59:59');

-- VALIDATION
 SET @SNAPSHOT_INICIO = TIMESTAMP('2018-01-31 23:59:59');
 SET @SNAPSHOT = TIMESTAMP('2018-04-30 23:59:59');
 
 
-- FULL
-- SET @SNAPSHOT_INICIO = TIMESTAMP('2016-12-31 23:59:59');
-- SET @SNAPSHOT = TIMESTAMP('2018-09-01 23:59:59');

DROP TABLE IF EXISTS Z_BASE_DONATIONS;
CREATE TABLE Z_BASE_DONATIONS (PRIMARY KEY(ID)) AS
SELECT 
	*
FROM
	DONATIONS
WHERE 
	CREATED_AT >= @SNAPSHOT_INICIO AND CREATED_AT <= @SNAPSHOT 
	AND MONTHLY = 1;

DROP TABLE IF EXISTS Z_BASE_CAMPAIGNS;
CREATE TABLE Z_BASE_CAMPAIGNS (PRIMARY KEY(ID)) AS
SELECT 
	*
FROM
	CAMPAIGNS
WHERE CREATED_AT <= @SNAPSHOT;

DROP TABLE IF EXISTS Z_BASE_DONORS;
CREATE TABLE Z_BASE_DONORS (PRIMARY KEY(ID)) AS
SELECT 
	*
FROM
	DONORS
WHERE 
	CREATED_AT >= @SNAPSHOT_INICIO AND CREATED_AT <= @SNAPSHOT ;
	

DROP TABLE IF EXISTS Z_BASE_ORGANIZATIONS;
CREATE TABLE Z_BASE_ORGANIZATIONS (PRIMARY KEY(ID)) AS
SELECT 
	*
FROM
	ORGANIZATIONS
WHERE CREATED_AT <= @SNAPSHOT
	AND COUNTRY = 'AR'
	AND ENABLED_AT IS NOT NULL;


DROP TABLE IF EXISTS Z_BASE_SHARES;
CREATE TABLE Z_BASE_SHARES (PRIMARY KEY(DONOR_ID)) AS
SELECT 
	*
FROM
	Z_PREPROCESS_SHARES_SIN_DUPLICADO
WHERE CREATED_AT <= @SNAPSHOT ;

DROP TABLE IF EXISTS Z_BASE_ANALYTICS_CAT_REFERRAL;
CREATE TABLE Z_BASE_ANALYTICS_CAT_REFERRAL (PRIMARY KEY(CAMPAIGN_ID)) AS
SELECT
	A.CAMPAIGN_ID,
	SUM(CASE WHEN ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_VIEWS,
	SUM(CASE WHEN ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_DONATIONS,
	SUM(CASE WHEN ACTION = 'VIEW' THEN 1 ELSE 0 END) / CASE WHEN COUNT(ACTION) = 0 THEN NULL ELSE COUNT(ACTION) END  ANALYTICS_RATIO_VIEWS,
	SUM(CASE WHEN ACTION = 'DONATION' THEN 1 ELSE 0 END) / CASE WHEN COUNT(ACTION) = 0 THEN NULL ELSE COUNT(ACTION) END ANALYTICS_RATIO_DONATION,
	COUNT(DISTINCT CATEGORIA_REFERRAL) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'FACEBOOK' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_FB,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'FACEBOOK' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_FB,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'GOOGLE' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_GOOGLE,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'GOOGLE' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_GOOGLE,
	SUM(CASE WHEN CATEGORIA_REFERRAL IS NULL AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_NULL,
	SUM(CASE WHEN CATEGORIA_REFERRAL IS NULL AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_NULL,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'DONARONLINE' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_DONARONLINE,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'DONARONLINE' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_DONARONLINE,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'URL_ONG' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_URL_ONG,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'URL_ONG' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_URL_ONG,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'OTRO' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_OTRO,
	SUM(CASE WHEN CATEGORIA_REFERRAL = 'OTRO' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_OTRO
FROM 
	Z_PREPROCESS_ANALYTICS_CAT_REFERRAL_RAW A
WHERE 
	CREATED_AT <= @SNAPSHOT 
GROUP BY 
	A.CAMPAIGN_ID;

DROP TABLE IF EXISTS Z_BASE_USERS_NVL_ORGANIZACION;
CREATE TABLE Z_BASE_USERS_NVL_ORGANIZACION (PRIMARY KEY(ORGANIZATION_ID)) AS
SELECT
	ORGANIZATION_ID,
	COUNT(DISTINCT ID) USERS_CAMP_Q_USERS,
	SUM(LOGIN_COUNT) USERS_CAMP_Q_LOGIN
FROM 
	USERS
WHERE 
	LAST_LOGIN_AT <= @SNAPSHOT
GROUP BY 
	ORGANIZATION_ID;

DROP TABLE IF EXISTS Z_BASE_SHARES_NIVEL_CAMPANIA;
CREATE TABLE Z_BASE_SHARES_NIVEL_CAMPANIA (PRIMARY KEY(CAMPAIGN_ID)) AS
SELECT
	CAMPAIGN_ID,
	COUNT(*) SHARES_CAMP_Q_SHARES
FROM 
	Z_PREPROCESS_SHARES_SIN_DUPLICADO
WHERE 
	CREATED_AT <= @SNAPSHOT 
GROUP BY CAMPAIGN_ID;



DROP TABLE IF EXISTS Z_BASE_PAYMENT_TRANSACTIONS;
CREATE TABLE Z_BASE_PAYMENT_TRANSACTIONS (PRIMARY KEY (DONATION_ID)) AS
SELECT
	B.DONATION_ID,
	SUM(CASE WHEN STATUS = 'APPROVED' THEN AMOUNT ELSE 0 END) AS AMOUNT_APPROVED,
	SUM(CASE WHEN STATUS = 'REJECTED' THEN AMOUNT ELSE 0 END) AS AMOUNT_REJECTED,
	SUM(CASE WHEN STATUS = 'PENDING' THEN AMOUNT ELSE 0 END) AS AMOUNT_PENDING,
	SUM(CASE WHEN STATUS = 'CANCELLED' THEN AMOUNT ELSE 0 END) AS AMOUNT_CANCELLED,
	SUM(CASE WHEN STATUS = 'CHARGED_BACK' THEN AMOUNT ELSE 0 END) AS AMOUNT_CHARGED_BACK,
	SUM(CASE WHEN STATUS = 'IN_PROCESS' THEN AMOUNT ELSE 0 END) AS AMOUNT_IN_PROCESS,
	SUM(CASE WHEN STATUS = 'REFUNDED' THEN AMOUNT ELSE 0 END) AS AMOUNT_REFUNDED,
	SUM(CASE WHEN STATUS = 'APPROVED' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_APPROVED,
	SUM(CASE WHEN STATUS = 'REJECTED' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_REJECTED,
	SUM(CASE WHEN STATUS = 'PENDING' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_PENDING,
	SUM(CASE WHEN STATUS = 'CANCELLED' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_CANCELLED,
	SUM(CASE WHEN STATUS = 'CHARGED_BACK' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_CHARGED_BACK,
	SUM(CASE WHEN STATUS = 'IN_PROCESS' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_IN_PROCESS,
	SUM(CASE WHEN STATUS = 'REFUNDED' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_REFUNDED,
	SUM(CASE WHEN STATUS = 'APPROVED' THEN 1 ELSE 0 END) AS Q_APPROVED,
	SUM(CASE WHEN STATUS = 'REJECTED' THEN 1 ELSE 0 END) AS Q_REJECTED,
	SUM(CASE WHEN STATUS = 'PENDING' THEN 1 ELSE 0 END) AS Q_PENDING,
	SUM(CASE WHEN STATUS = 'CANCELLED' THEN 1 ELSE 0 END) AS Q_CANCELLED,
	SUM(CASE WHEN STATUS = 'CHARGED_BACK' THEN 1 ELSE 0 END) AS Q_CHARGED_BACK,
	SUM(CASE WHEN STATUS = 'IN_PROCESS' THEN 1 ELSE 0 END) AS Q_IN_PROCESS,
	SUM(CASE WHEN STATUS = 'REFUNDED' THEN 1 ELSE 0 END) AS Q_REFUNDED,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_019" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_019	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_034" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_034	,
	SUM(CASE WHEN STATUS_DETAIL IS NULL THEN 1 ELSE 0 END)	AS	Q_NULL	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_040" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_040	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_026" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_026	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_022" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_022	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_86" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_86	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_56" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_56	,
	SUM(CASE WHEN STATUS_DETAIL ="CARD_CHANGE" THEN 1 ELSE 0 END)	AS	Q_CARD_CHANGE	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_51" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_51	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_52" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_52	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_91" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_91	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_63" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_63	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_55" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_55	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_006" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_006	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_024" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_024	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_020" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_020	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_54" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_54	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_99" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_99	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_96" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_96	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_50" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_50	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_021" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_021	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_62" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_62	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_66" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_66	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_01" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_01	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_11" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_11	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_081" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_081	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_074" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_074	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_035" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_035	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_15" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_15	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_79" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_79	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_109" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_109	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_008" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_008	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_007" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_007	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_21" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_21	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_041" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_041	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_78" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_78	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_61" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_61	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_07" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_07	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_08" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_08	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_OTHER_REASON" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_OTHER_REASON	,
	SUM(CASE WHEN STATUS_DETAIL ="ACCREDITED" THEN 1 ELSE 0 END)	AS	Q_ACCREDITED	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_033" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_033	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_BAD_FILLED_SECURITY_CODE" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_60" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_60	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_HIGH_RISK" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_HIGH_RISK	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_CALL_FOR_AUTHORIZE" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_CALL_FOR_AUTHORIZE	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_064" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_064	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_64" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_64	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_14" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_14	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_INSUFFICIENT_AMOUNT" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_INSUFFICIENT_AMOUNT	,
	SUM(CASE WHEN STATUS_DETAIL ="EXPIRED" THEN 1 ELSE 0 END)	AS	Q_EXPIRED	,
	SUM(CASE WHEN STATUS_DETAIL ="SETTLED" THEN 1 ELSE 0 END)	AS	Q_SETTLED	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_015" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_015	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_BLACKLIST" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BLACKLIST	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_135" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_135	,
	SUM(CASE WHEN STATUS_DETAIL ="PENDING_REVIEW_MANUAL" THEN 1 ELSE 0 END)	AS	Q_PENDING_REVIEW_MANUAL	,
	SUM(CASE WHEN STATUS_DETAIL ="IN_PROCESS" THEN 1 ELSE 0 END)	AS	ERROR_Q_IN_PROCESS	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_BAD_FILLED_DATE" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BAD_FILLED_DATE	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_BAD_FILLED_OTHER" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BAD_FILLED_OTHER	,
	SUM(CASE WHEN STATUS_DETAIL ="REFUNDED" THEN 1 ELSE 0 END)	AS	ERROR_Q_REFUNDED	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_145" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_145	,
	SUM(CASE WHEN STATUS_DETAIL ="ERROR_CODE_85" THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_85	,
	SUM(CASE WHEN STATUS_DETAIL ="CC_REJECTED_INVALID_INSTALLMENTS" THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_INVALID_INSTALLMENTS	
FROM 
	PAYMENT_TRANSACTIONS A
INNER JOIN 
	PAYMENT_METHODS B
ON A.PAYMENT_METHOD_ID = B.ID
WHERE 
	A.CREATED_AT <= @SNAPSHOT
GROUP BY 
	DONATION_ID;

DROP TABLE IF EXISTS Z_BASE_PAYMENT_TRANSACTIONS_RATIOS;
CREATE TABLE Z_BASE_PAYMENT_TRANSACTIONS_RATIOS (PRIMARY KEY(DONATION_ID)) AS
SELECT
	AA.ID AS DONATION_ID,
	Q_APPROVED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_APPROVED,
	Q_REJECTED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_REJECTED,
	Q_PENDING/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_PENDING,
	Q_CANCELLED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CANCELLED,
	Q_CHARGED_BACK/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CHARGED_BACK,
	Q_IN_PROCESS/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_IN_PROCESS,
	Q_REFUNDED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_REFUNDED,
	Q_ERROR_CODE_019/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_019,
	Q_ERROR_CODE_034/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_034,
	Q_NULL/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_NULL,
	Q_ERROR_CODE_040/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_040,
	Q_ERROR_CODE_026/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_026,
	Q_ERROR_CODE_022/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_022,
	Q_ERROR_CODE_86/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_86,
	Q_ERROR_CODE_56/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_56,
	Q_CARD_CHANGE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CARD_CHANGE,
	Q_ERROR_CODE_51/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_51,
	Q_ERROR_CODE_52/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_52,
	Q_ERROR_CODE_91/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_91,
	Q_ERROR_CODE_63/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_63,
	Q_ERROR_CODE_55/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_55,
	Q_ERROR_CODE_006/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_006,
	Q_ERROR_CODE_024/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_024,
	Q_ERROR_CODE_020/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_020,
	Q_ERROR_CODE_54/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_54,
	Q_ERROR_CODE_99/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_99,
	Q_ERROR_CODE_96/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_96,
	Q_ERROR_CODE_50/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_50,
	Q_ERROR_CODE_021/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_021,
	Q_ERROR_CODE_62/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_62,
	Q_ERROR_CODE_66/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_66,
	Q_ERROR_CODE_01/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_01,
	Q_ERROR_CODE_11/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_11,
	Q_ERROR_CODE_081/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_081,
	Q_ERROR_CODE_074/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_074,
	Q_ERROR_CODE_035/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_035,
	Q_ERROR_CODE_15/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_15,
	Q_ERROR_CODE_79/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_79,
	Q_ERROR_CODE_109/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_109,
	Q_ERROR_CODE_008/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_008,
	Q_ERROR_CODE_007/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_007,
	Q_ERROR_CODE_21/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_21,
	Q_ERROR_CODE_041/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_041,
	Q_ERROR_CODE_78/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_78,
	Q_ERROR_CODE_61/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_61,
	Q_ERROR_CODE_07/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_07,
	Q_ERROR_CODE_08/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_08,
	Q_CC_REJECTED_OTHER_REASON/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_OTHER_REASON,
	Q_ACCREDITED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ACCREDITED,
	Q_ERROR_CODE_033/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_033,
	Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE,
	Q_ERROR_CODE_60/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_60,
	Q_CC_REJECTED_HIGH_RISK/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_HIGH_RISK,
	Q_CC_REJECTED_CALL_FOR_AUTHORIZE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_CALL_FOR_AUTHORIZE,
	Q_ERROR_CODE_064/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_064,
	Q_ERROR_CODE_64/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_64,
	Q_ERROR_CODE_14/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_14,
	Q_CC_REJECTED_INSUFFICIENT_AMOUNT/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_INSUFFICIENT_AMOUNT,
	Q_EXPIRED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_EXPIRED,
	Q_SETTLED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_SETTLED,
	Q_ERROR_CODE_015/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_015,
	Q_CC_REJECTED_BLACKLIST/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BLACKLIST,
	Q_ERROR_CODE_135/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_135,
	Q_PENDING_REVIEW_MANUAL/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_PENDING_REVIEW_MANUAL,
	ERROR_Q_IN_PROCESS/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_ERROR_Q_IN_PROCESS,
	Q_CC_REJECTED_BAD_FILLED_DATE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BAD_FILLED_DATE,
	Q_CC_REJECTED_BAD_FILLED_OTHER/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BAD_FILLED_OTHER,
	ERROR_Q_REFUNDED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_ERROR_Q_REFUNDED,
	Q_ERROR_CODE_145/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_145,
	Q_ERROR_CODE_85/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_85,
	Q_CC_REJECTED_INVALID_INSTALLMENTS/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_INVALID_INSTALLMENTS
FROM
	(SELECT
		ID,
		TIMESTAMPDIFF(MONTH,CREATED_AT,@SNAPSHOT) DONATION_DURACION_MESES
	FROM
		Z_BASE_DONATIONS) AA
LEFT JOIN 
	Z_BASE_PAYMENT_TRANSACTIONS B
ON AA.ID = B.DONATION_ID;


	
DROP TABLE IF EXISTS Z_BASE_PAYMENT_TRANSACTIONS_PAGOS_FECHAS;
CREATE TABLE Z_BASE_PAYMENT_TRANSACTIONS_PAGOS_FECHAS (PRIMARY KEY(DONATION_ID)) AS	
SELECT
	DONATION_ID,
	AA.*
FROM	
(SELECT 
	PAYMENT_METHOD_ID,
	AVG(DAY(CREATED_AT)) PAGOS_PROM_DIA,
	STD(DAY(CREATED_AT)) PAGOS_STD_DIA
FROM 
	PAYMENT_TRANSACTIONS 
WHERE STATUS = 'APPROVED'
	 AND CREATED_AT <= @SNAPSHOT
GROUP BY 1) AA
LEFT JOIN 
	PAYMENT_METHODS B
ON AA.PAYMENT_METHOD_ID = B.ID
WHERE DONATION_ID NOT IN (SELECT 
							DONATION_ID
						  FROM
							PAYMENT_METHODS
						  GROUP BY 
						  	DONATION_ID
						  HAVING 
						  	COUNT(*) > 1); -- DUPLICADO;
  	

DROP TABLE IF EXISTS Z_BASE_PAYMENT_TRANSACTIONS_PAGOS_REJECTED_FECHAS;
CREATE TABLE Z_BASE_PAYMENT_TRANSACTIONS_PAGOS_REJECTED_FECHAS (PRIMARY KEY(DONATION_ID)) AS	
SELECT
	B.DONATION_ID,
	AA.*
FROM	
	(SELECT 
		PAYMENT_METHOD_ID,
		AVG(DAY(CREATED_AT)) PAGOS_REJECTED_PROM_DIA,
		STD(DAY(CREATED_AT)) PAGOS_REJECTED_STD_DIA
	FROM 
		PAYMENT_TRANSACTIONS 
	WHERE 
		STATUS = 'REJECTED'
	 	AND CREATED_AT <= @SNAPSHOT
	GROUP BY 1) AA
INNER JOIN 
	PAYMENT_METHODS B
ON AA.PAYMENT_METHOD_ID = B.ID
WHERE DONATION_ID NOT IN (SELECT 
							DONATION_ID
						  FROM
							PAYMENT_METHODS
						  GROUP BY 
						  	DONATION_ID
						  HAVING 
						  	COUNT(*) > 1); -- DUPLICADO;
						  	
						  	


DROP TABLE IF EXISTS Z_BASE_DONANTES_ACTUALIZACION;
CREATE TABLE Z_BASE_DONANTES_ACTUALIZACION (PRIMARY KEY(ITEM_ID)) AS
SELECT 
	*,
	ROUND(DATEDIFF(VERSION_ULTIMA_ACTUALIZACION,@SNAPSHOT))DONOR_VERSION_ULTIMA_ACTUALIZACION
FROM
	(SELECT 
		ITEM_ID,
		COUNT(*) VERSION_CANTIDAD_ACTUALIZACIONES,
		MAX(CREATED_AT) VERSION_ULTIMA_ACTUALIZACION
	FROM 
		VERSIONS
	WHERE 
		ITEM_TYPE = 'DONOR'
	AND CREATED_AT <= @SNAPSHOT 
	GROUP BY ITEM_ID) AA;

DROP TABLE IF EXISTS Z_BASE_DONANTES_SHARES;
CREATE TABLE Z_BASE_DONANTES_SHARES (PRIMARY KEY(DONOR_ID)) AS	
SELECT
	*
FROM
	Z_PREPROCESS_SHARES_SIN_DUPLICADO
WHERE CREATED_AT <= @SNAPSHOT;

DROP TABLE IF EXISTS Z_BASE_DONANTES;
CREATE TABLE Z_BASE_DONANTES (PRIMARY KEY(DONOR_ID)) AS
SELECT
	A.ID AS DONOR_ID,
	A.STREET_ADDRESS AS DONOR_DOMICILIO,
	A.CITY_ADDRESS AS DONOR_CITY,
	A.STATE_ADDRESS AS DONOR_STATE,
	A.ZIPCODE_ADDRESS AS DONOR_ZIPCODE,
	A.COUNTRY_ADDRESS AS DONOR_PAIS,
	TRIM(A.OCCUPATION) AS DONOR_OFICIO,
	A.GENDER AS DONOR_GENERO,
	A.PHONE AS DONOR_TEL,
	A.CELLPHONE AS DONOR_CEL,
	A.BIRTHDAY AS DONOR_NACIMIENTO,
	ROUND(DATEDIFF(DATE(A.CREATED_AT), A.BIRTHDAY)/365,0) DONOR_EDAD_AL_DONAR,
	ROUND(DATEDIFF(@SNAPSHOT, A.BIRTHDAY)/365,0) DONOR_EDAD_ACTUAL,
	A.CREATED_AT AS DONOR_FECHA_INICIO,
	CONCAT(YEAR(A. CREATED_AT),"-",MONTH(A. CREATED_AT)) AS DONOR_FECHA_INICIO_ANIO_MES,
	A.UPDATED_AT AS DONOR_FECHA_ACTUALIZACION,
	CAST(CONCAT(YEAR(A.UPDATED_AT),MONTH(A.UPDATED_AT)) AS UNSIGNED) AS DONACION_ACTUALIZACION_MESANIO,
	B.VERSION_CANTIDAD_ACTUALIZACIONES AS DONOR_VERSION_CANTIDAD_ACTUALIZACIONES,
	B.DONOR_VERSION_ULTIMA_ACTUALIZACION,
	CASE WHEN C.DONOR_ID IS NOT NULL THEN 1 ELSE 0 END DONOR_SHEARDOR, # DONANTE QUE HACE SHARES
	CASE WHEN  A.PHONE IS NOT NULL OR A.CELLPHONE IS NOT NULL THEN 1 
		 WHEN A.PHONE IS NOT NULL AND A.CELLPHONE IS NOT NULL THEN 2
		 ELSE 0 END AS DONOR_Q_TELEFONOS,
	(CASE WHEN TRIM(A.STREET_ADDRESS) IS NOT NULL OR TRIM(A.STREET_ADDRESS) != '' OR A.STREET_ADDRESS != '--,--' OR A.STREET_ADDRESS != '*,*'   THEN 1 ELSE 0 END + 
		CASE WHEN TRIM(A.CITY_ADDRESS) IS NOT NULL OR TRIM(A.CITY_ADDRESS) != '-' OR A.CITY_ADDRESS NOT LIKE '%XX%'  OR A.CITY_ADDRESS = ' ' THEN 1 ELSE 0 END +  
		CASE WHEN TRIM(A.STATE_ADDRESS) IS NOT NULL OR TRIM(A.STATE_ADDRESS) != ''  OR A.STATE_ADDRESS = ' ' THEN 1 ELSE 0 END +
		CASE WHEN TRIM(A.ZIPCODE_ADDRESS) IS NOT NULL OR TRIM(A.ZIPCODE_ADDRESS) != ''  OR A.ZIPCODE_ADDRESS = ' ' THEN 1 ELSE 0 END +
		CASE WHEN TRIM(A.COUNTRY_ADDRESS) IS NOT NULL OR TRIM(A.COUNTRY_ADDRESS) != ''  OR A.COUNTRY_ADDRESS = ' ' THEN 1 ELSE 0 END +
		CASE WHEN TRIM(A.OCCUPATION) IS NOT NULL OR TRIM(A.OCCUPATION) <> '' OR A.OCCUPATION = ' ' THEN 1 ELSE 0 END +
		CASE WHEN A.GENDER IS NOT NULL THEN 1 ELSE 0 END +
		CASE WHEN TRIM(A.CELLPHONE) IS NOT NULL OR TRIM(A.CELLPHONE) != ''  OR A.CELLPHONE = ' ' THEN 1 ELSE 0 END +
		CASE WHEN TRIM(A.PHONE) IS NOT NULL OR TRIM(A.PHONE) != ''  OR A.PHONE = ' ' THEN 1 ELSE 0 END +
		CASE WHEN A.BIRTHDAY IS NOT NULL THEN 1 ELSE 0 END) DONOR_Q_DATOS_COMPLETADOS,
	CASE WHEN  A.OCCUPATION IS NOT NULL THEN 1 ELSE 0 END AS DONOR_DATO_OCCUPATION,
	CASE WHEN D.DONOR_ID IS NULL THEN 0 ELSE 1 END AS DONOR_DATO_DISTANCIA,
	D.DISTANCE AS DONOR_DISTANCIA_ONG,
	E.OCCUPATION_NORMALIZED AS DONOR_OFICIO_NORMALIZADO 
FROM 
	Z_PREPROCESS_DONOR A
LEFT JOIN 
	Z_BASE_DONANTES_ACTUALIZACION B
ON A.ID = B.ITEM_ID
LEFT JOIN 
	Z_BASE_DONANTES_SHARES C
ON A.ID = C.DONOR_ID
LEFT JOIN
	 Z_GEO_DISTANCIAS D
ON A.ID = D.DONOR_ID
LEFT JOIN
	Z_OCCUPATION_NORMALIZED E
ON A.ID = E.DONOR_ID;


### METODOS DE PAGO 
# CANTIDAD DE METODOS DISINTOS DE PAGO POR DONACION
DROP TABLE IF EXISTS Z_BASE_Q_DISINTOS_METHODS_POR_DONACION;
CREATE TABLE Z_BASE_Q_DISINTOS_METHODS_POR_DONACION (PRIMARY KEY(DONATION_ID)) AS
SELECT
	DONATION_ID, 
	COUNT(*) DONACION_CANTIDAD_DISINTOS_METODOS_PAGO,
	SUM(CASE WHEN CARD_METHOD_ID="AMEX" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_AMEX,
	SUM(CASE WHEN CARD_METHOD_ID="ARGENCARD" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_ARGENCARD,
	SUM(CASE WHEN CARD_METHOD_ID="BANELCO" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_BANELCO,
	SUM(CASE WHEN CARD_METHOD_ID="CABAL" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_CABAL,
	SUM(CASE WHEN CARD_METHOD_ID="CMR" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_CMR,
	SUM(CASE WHEN CARD_METHOD_ID="CODENSA" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_CODENSA,
	SUM(CASE WHEN CARD_METHOD_ID="CORDOBESA" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_CORDOBESA,
	SUM(CASE WHEN CARD_METHOD_ID="CREDIMAS" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_CREDIMAS,
	SUM(CASE WHEN CARD_METHOD_ID="DEBCABAL" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_DEBCABAL,
	SUM(CASE WHEN CARD_METHOD_ID="DEBMASTER" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_DEBMASTER,
	SUM(CASE WHEN CARD_METHOD_ID="DEBVISA" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_DEBVISA,
	SUM(CASE WHEN CARD_METHOD_ID="DINERS" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_DINERS,
	SUM(CASE WHEN CARD_METHOD_ID="MAESTRO" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_MAESTRO,
	SUM(CASE WHEN CARD_METHOD_ID="MAS" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_MAS,
	SUM(CASE WHEN CARD_METHOD_ID="MASTER" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_MASTER,
	SUM(CASE WHEN CARD_METHOD_ID="MERCADOPAGO_CC" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_MERCADOPAGO_CC,
	SUM(CASE WHEN CARD_METHOD_ID="NARANJA" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_NARANJA,
	SUM(CASE WHEN CARD_METHOD_ID="NATIVA" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_NATIVA,
	SUM(CASE WHEN CARD_METHOD_ID="NEVADA" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_NEVADA,
	SUM(CASE WHEN CARD_METHOD_ID="TARSHOP" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_TARSHOP,
	SUM(CASE WHEN CARD_METHOD_ID="VISA" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_VISA,
	SUM(CASE WHEN CARD_METHOD_ID="VISA_DEBITO" THEN 1 ELSE 0 END) DONACION_Q_MEDIO_PAGO_VISA_DEBITO
FROM 
	PAYMENT_METHODS
WHERE
	CREATED_AT <= @SNAPSHOT 
GROUP BY 
	DONATION_ID;
	

DROP TABLE IF EXISTS Z_BASE_CARD_METHOD;		
CREATE TABLE Z_BASE_CARD_METHOD (PRIMARY KEY(DONATION_ID)) AS
SELECT 
	A.DONATION_ID,
	A.CARD_METHOD_ID AS DONACION_MEDIO_PAGO_RECIENTE
FROM 
	PAYMENT_METHODS A
INNER JOIN 
	(SELECT 
		DONATION_ID, 
		MAX(CREATED_AT) PAY_METHOD_MAS_ACTUAL 
	FROM 
		PAYMENT_METHODS 
	WHERE 
		CREATED_AT <= @SNAPSHOT GROUP BY 1) B
ON A.DONATION_ID = B.DONATION_ID
AND A.CREATED_AT = B.PAY_METHOD_MAS_ACTUAL;


############################################################ DATA SET TRAIN Y VALIDATION ############################################################
-- TRAIN CON SNAPSHOT A DICIEMBRE 2017

-- DROP TABLE IF EXISTS Z_TRAIN;
-- CREATE TABLE Z_TRAIN (PRIMARY KEY(DONATION_ID)) AS

-- VALIDATION:
  DROP TABLE IF EXISTS Z_VALIDATION;
  CREATE TABLE Z_VALIDATION (PRIMARY KEY(DONATION_ID)) AS
 
 -- FULL

-- DROP TABLE IF EXISTS Z_FULL;
-- CREATE TABLE Z_FULL (PRIMARY KEY(DONATION_ID)) AS

SELECT

-- IDs

A.ID AS DONATION_ID,
A.CAMPAIGN_ID,
A.DONOR_ID,
C.ID AS ORGANIZATION_ID,

-- DONACION 

A.AMOUNT DONACION_MONTO,
CASE WHEN A.AMOUNT_NAME IS NULL THEN 0 ELSE 1 END DONACION_MONTO_NOMBRE,
A.ONE_TIME DONACION_ONETIME,
A.MONTHLY DONACION_MENSUAL,
A.IP DONACION_IP,
A.ENABLE_UNTIL DONACION_FIN_PROGRAMADO,
A.RISK_MEASURE DONACION_RISK_MEASURE,
A.CREATED_AT DONACION_INICIO,
A.DELETED_AT DONACION_FIN,
CAST(YEAR(A.CREATED_AT)*100 + MONTH(A.CREATED_AT) AS UNSIGNED) AS DONACION_INICIO_ANIO_MES,
CAST(YEAR(A.DELETED_AT)*100 + MONTH(A.DELETED_AT) AS UNSIGNED) AS DONACION_FIN_ANIO_MES,
DATE(A.CREATED_AT) DONACION_INICIO_FECHA,
DATE(A.DELETED_AT) AS DONACION_FIN_FECHA,
CASE WHEN A.ENABLE_UNTIL IS NOT NULL THEN TIMESTAMPDIFF(DAY, A.CREATED_AT, A.ENABLE_UNTIL) ELSE NULL END DONACION_DURACION_PROGRAMADA,
DAY(A.CREATED_AT) DONACION_DIA,
CASE WHEN DAY(A.CREATED_AT) <= 15 THEN 1 ELSE 2 END AS DONACION_QUINCENA,
HOUR(A.CREATED_AT) DONACION_HORA,

-- CAMPANA

#B.TITLE CAMPANIA_TITULO,
#B.DESCRIPTION CAMPANIA_DESCR,
CASE WHEN B.THANKS_EMAIL IS NOT NULL THEN 1 ELSE 0 END AS CAMPANIA_TKS_EMAIL,
#B.THANKS_MESSAGE CAMPANIA_TKS_MSG,
B.CREATED_AT AS CAMPANIA_INICIO,
B.DELETED_AT AS CAMPANIA_FIN,
CAST(YEAR(B.CREATED_AT)*100 + MONTH(B.CREATED_AT)AS UNSIGNED) AS CAMPANIA_INICIO_ANIO_MES,
CAST(YEAR(B.DELETED_AT)*100 + MONTH(B.DELETED_AT)AS UNSIGNED) AS CAMPANIA_FIN_ANIO_MES,
CASE WHEN B.DELETED_AT IS NOT NULL THEN TIMESTAMPDIFF(DAY, B.CREATED_AT, B.DELETED_AT) ELSE TIMESTAMPDIFF(DAY, B.CREATED_AT, @SNAPSHOT)  END CAMPANIA_DURACION,
CASE WHEN B.DELETED_AT IS NULL OR B.DELETED_AT > @SNAPSHOT THEN 1 ELSE 0 END AS CAMPANIA_ACTIVA,

-- ANALYTICS CAMPANA

G.ANALYTICS_CAMP_Q_VIEWS,
G.ANALYTICS_CAMP_Q_DONATIONS,
G.ANALYTICS_RATIO_VIEWS,
G.ANALYTICS_RATIO_DONATION,
G.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL,
G.ANALYTICS_CAMP_VIEW_FB,
G.ANALYTICS_CAMP_DONATION_FB,
G.ANALYTICS_CAMP_VIEW_GOOGLE,
G.ANALYTICS_CAMP_DONATION_GOOGLE,
G.ANALYTICS_CAMP_VIEW_NULL,
G.ANALYTICS_CAMP_DONATION_NULL,
G.ANALYTICS_CAMP_VIEW_DONARONLINE,
G.ANALYTICS_CAMP_DONATION_DONARONLINE,
G.ANALYTICS_CAMP_VIEW_URL_ONG,
G.ANALYTICS_CAMP_DONATION_URL_ONG,
G.ANALYTICS_CAMP_VIEW_OTRO,
G.ANALYTICS_CAMP_DONATION_OTRO,

-- ONG

#C. NAME AS ONG,
#C.LEGAL_NAME ONG_NAME,
#C.BIO ONG_BIO,
#C.ADDRESS_1 ONG_DOMICILIO,
#C.ADDRESS_2 ONG_DOMICILIO_2,
#C.ZIP_CODE ONG_ZIPCODE,
#C.CITY AS ONG_CITY,
#C.STATE AS ONG_STATE,
#C.COUNTRY AS ONG_COUNTRY,
#C.WEBSITE AS ONG_WEBSITE,
#C.FACEBOOK AS ONG_FACEBOOK,
#C.TWITTER AS ONG_TWITTER,
#C.SKYPE AS ONG_SKYPE,
#C.LINKEDIN AS ONG_LINKEDIN,
#C.OPT_IN AS ONG_SUSCRIPCION_NEWSLETTER,
C. ENABLED_AT AS ONG_INICIO_EN_DO,
C. DISCARDED_AT AS ONG_FIN_EN_DO,
CAST(YEAR(C. ENABLED_AT)*100 + MONTH(C. ENABLED_AT)AS UNSIGNED) AS ONG_INICIO_EN_DO_ANIO_MES,
CAST(YEAR(C. DISCARDED_AT) * 100 + MONTH(C. DISCARDED_AT) AS UNSIGNED) AS ONG_FIN_EN_DO_ANIO_MES,
CASE WHEN C.DISCARDED_AT IS NOT NULL THEN TIMESTAMPDIFF(DAY, C.ENABLED_AT, C.DISCARDED_AT) ELSE TIMESTAMPDIFF(DAY, C.ENABLED_AT, @SNAPSHOT) END ONG_DURACION_EN_DO,
CASE WHEN C.DISCARDED_AT IS NULL THEN 1 ELSE 0 END AS ONG_ACTIVA,

-- ONG TAG

J.TAGS_ONG_Q_TAGS,
J.TAGS_EDUCACION,
J.TAGS_NINEZ,
J.TAGS_SALUD,
J.TAGS_POBREZA,
J.TAGS_DDHH,
J.TAGS_ASOCIACIONES,
J.TAGS_VOLUNTARIADO,
J.TAGS_CAPAC_ESPEC,
J.TAGS_ARTE,
J.TAGS_MEDIO_AMBIENTE,
J.TAGS_EMPLEO,
J.TAGS_DEPORTES,
J.TAGS_ANIMALES,
J.TAGS_MICROCREDITOS,
J.TAGS_CIENCIA,
J.TAGS_RELIGION,
J.TAGS_TECNO,
J.TAGS_COOPERACION,
J.TAGS_GENERO,
J.TAGS_POLITICA,
J.TAGS_VIVIENDA,
J.TAGS_AGRICULTURA,
J.TAGS_CATASTROFE,
J.TAGS_JUBILACION,

-- ONG USERS
H.USERS_CAMP_Q_USERS,
H.USERS_CAMP_Q_LOGIN,
I.SHARES_CAMP_Q_SHARES,

-- PAGOS

E.AMOUNT_APPROVED,
E.AMOUNT_REJECTED,
E.AMOUNT_PENDING,
E.AMOUNT_CANCELLED,
E.AMOUNT_CHARGED_BACK,
E.AMOUNT_IN_PROCESS,
E.AMOUNT_REFUNDED,
E.COLLECTED_AMOUNT_APPROVED,
E.COLLECTED_AMOUNT_REJECTED,
E.COLLECTED_AMOUNT_PENDING,
E.COLLECTED_AMOUNT_CANCELLED,
E.COLLECTED_AMOUNT_CHARGED_BACK,
E.COLLECTED_AMOUNT_IN_PROCESS,
E.COLLECTED_AMOUNT_REFUNDED,
D.RATIO_Q_APPROVED,
D.RATIO_Q_REJECTED,
D.RATIO_Q_PENDING,
D.RATIO_Q_CANCELLED,
D.RATIO_Q_CHARGED_BACK,
D.RATIO_Q_IN_PROCESS,
D.RATIO_Q_REFUNDED,
D.RATIO_Q_ERROR_CODE_019,
D.RATIO_Q_ERROR_CODE_034,
D.RATIO_Q_NULL,
D.RATIO_Q_ERROR_CODE_040,
D.RATIO_Q_ERROR_CODE_026,
D.RATIO_Q_ERROR_CODE_022,
D.RATIO_Q_ERROR_CODE_86,
D.RATIO_Q_ERROR_CODE_56,
D.RATIO_Q_CARD_CHANGE,
D.RATIO_Q_ERROR_CODE_51,
D.RATIO_Q_ERROR_CODE_52,
D.RATIO_Q_ERROR_CODE_91,
D.RATIO_Q_ERROR_CODE_63,
D.RATIO_Q_ERROR_CODE_55,
D.RATIO_Q_ERROR_CODE_006,
D.RATIO_Q_ERROR_CODE_024,
D.RATIO_Q_ERROR_CODE_020,
D.RATIO_Q_ERROR_CODE_54,
D.RATIO_Q_ERROR_CODE_99,
D.RATIO_Q_ERROR_CODE_96,
D.RATIO_Q_ERROR_CODE_50,
D.RATIO_Q_ERROR_CODE_021,
D.RATIO_Q_ERROR_CODE_62,
D.RATIO_Q_ERROR_CODE_66,
D.RATIO_Q_ERROR_CODE_01,
D.RATIO_Q_ERROR_CODE_11,
D.RATIO_Q_ERROR_CODE_081,
D.RATIO_Q_ERROR_CODE_074,
D.RATIO_Q_ERROR_CODE_035,
D.RATIO_Q_ERROR_CODE_15,
D.RATIO_Q_ERROR_CODE_79,
D.RATIO_Q_ERROR_CODE_109,
D.RATIO_Q_ERROR_CODE_008,
D.RATIO_Q_ERROR_CODE_007,
D.RATIO_Q_ERROR_CODE_21,
D.RATIO_Q_ERROR_CODE_041,
D.RATIO_Q_ERROR_CODE_78,
D.RATIO_Q_ERROR_CODE_61,
D.RATIO_Q_ERROR_CODE_07,
D.RATIO_Q_ERROR_CODE_08,
D.RATIO_Q_CC_REJECTED_OTHER_REASON,
D.RATIO_Q_ACCREDITED,
D.RATIO_Q_ERROR_CODE_033,
D.RATIO_Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE,
D.RATIO_Q_ERROR_CODE_60,
D.RATIO_Q_CC_REJECTED_HIGH_RISK,
D.RATIO_Q_CC_REJECTED_CALL_FOR_AUTHORIZE,
D.RATIO_Q_ERROR_CODE_064,
D.RATIO_Q_ERROR_CODE_64,
D.RATIO_Q_ERROR_CODE_14,
D.RATIO_Q_CC_REJECTED_INSUFFICIENT_AMOUNT,
D.RATIO_Q_EXPIRED,
D.RATIO_Q_SETTLED,
D.RATIO_Q_ERROR_CODE_015,
D.RATIO_Q_CC_REJECTED_BLACKLIST,
D.RATIO_Q_ERROR_CODE_135,
D.RATIO_Q_PENDING_REVIEW_MANUAL,
D.RATIO_ERROR_Q_IN_PROCESS,
D.RATIO_Q_CC_REJECTED_BAD_FILLED_DATE,
D.RATIO_Q_CC_REJECTED_BAD_FILLED_OTHER,
D.RATIO_ERROR_Q_REFUNDED,
D.RATIO_Q_ERROR_CODE_145,
D.RATIO_Q_ERROR_CODE_85,
D.RATIO_Q_CC_REJECTED_INVALID_INSTALLMENTS,
N.DONACION_CANTIDAD_DISINTOS_METODOS_PAGO,
N.DONACION_Q_MEDIO_PAGO_AMEX,
N.DONACION_Q_MEDIO_PAGO_ARGENCARD,
N.DONACION_Q_MEDIO_PAGO_BANELCO,
N.DONACION_Q_MEDIO_PAGO_CABAL,
N.DONACION_Q_MEDIO_PAGO_CMR,
N.DONACION_Q_MEDIO_PAGO_CODENSA,
N.DONACION_Q_MEDIO_PAGO_CORDOBESA,
N.DONACION_Q_MEDIO_PAGO_CREDIMAS,
N.DONACION_Q_MEDIO_PAGO_DEBCABAL,
N.DONACION_Q_MEDIO_PAGO_DEBMASTER,
N.DONACION_Q_MEDIO_PAGO_DEBVISA,
N.DONACION_Q_MEDIO_PAGO_DINERS,
N.DONACION_Q_MEDIO_PAGO_MAESTRO,
N.DONACION_Q_MEDIO_PAGO_MAS,
N.DONACION_Q_MEDIO_PAGO_MASTER,
N.DONACION_Q_MEDIO_PAGO_MERCADOPAGO_CC,
N.DONACION_Q_MEDIO_PAGO_NARANJA,
N.DONACION_Q_MEDIO_PAGO_NATIVA,
N.DONACION_Q_MEDIO_PAGO_NEVADA,
N.DONACION_Q_MEDIO_PAGO_TARSHOP,
N.DONACION_Q_MEDIO_PAGO_VISA,
N.DONACION_Q_MEDIO_PAGO_VISA_DEBITO,
Q.DONACION_MEDIO_PAGO_RECIENTE,
K.PAGOS_PROM_DIA,
K.PAGOS_STD_DIA,
P.PAGOS_REJECTED_PROM_DIA,
P.PAGOS_REJECTED_STD_DIA,
ABS(K.PAGOS_PROM_DIA - P.PAGOS_REJECTED_PROM_DIA) PAGOS_DIF_DIAR_APPROVED_REJECTED,

-- DONOR

#F.STREET_ADDRESS AS DONOR_DOMICILIO,
#F.CITY_ADDRESS AS DONOR_CITY,
#F.STATE_ADDRESS AS DONOR_STATE,
#F.ZIPCODE_ADDRESS AS DONOR_ZIPCODE,
#F.COUNTRY_ADDRESS AS DONOR_PAIS,
#F.OCCUPATION AS DONOR_OFICIO,
CASE WHEN F.GENDER = 'Mujer' THEN 1 ELSE 0 END AS DONOR_GENERO,
#F.PHONE AS DONOR_TEL,
#F.CELLPHONE AS DONOR_CEL,
#F.BIRTHDAY AS DONOR_NACIMIENTO,
M.DONOR_EDAD_AL_DONAR,
M.DONOR_EDAD_ACTUAL,
M.DONOR_FECHA_ACTUALIZACION,
M.DONACION_ACTUALIZACION_MESANIO AS DONOR_ACTUALIZACION_MESANIO,
M.DONOR_VERSION_CANTIDAD_ACTUALIZACIONES,
M.DONOR_VERSION_ULTIMA_ACTUALIZACION,
M.DONOR_SHEARDOR,
M.DONOR_Q_DATOS_COMPLETADOS,
M.DONOR_Q_DATOS_COMPLETADOS / 10 AS DONOR_RATIO_DATOS_COMPLETOS,
M.DONOR_Q_TELEFONOS,
M.DONOR_DATO_OCCUPATION,
M.DONOR_DATO_DISTANCIA,
M.DONOR_DISTANCIA_ONG,
M.DONOR_OFICIO_NORMALIZADO,

-- VARIABLES TARGET

CASE WHEN A.DELETED_AT IS NOT NULL AND A.DELETED_AT <= @SNAPSHOT 
	 THEN TIMESTAMPDIFF(DAY, DATE(A.CREATED_AT), DATE(A.DELETED_AT)) 
	 ELSE TIMESTAMPDIFF(DAY, DATE(A.CREATED_AT), DATE(@SNAPSHOT) ) END TENURE,
CASE WHEN (A.DELETED_AT IS NULL OR A.DELETED_AT > @SNAPSHOT ) THEN 0 ELSE 1 END AS CHURN,

-- VALIDATION: AGREGAR SGTE STATMENT:

 CASE WHEN A.DELETED_AT IS NOT NULL AND A.DELETED_AT > @SNAPSHOT 
	 THEN TIMESTAMPDIFF(DAY, DATE(@SNAPSHOT), DATE(A.DELETED_AT)) 
	 ELSE TIMESTAMPDIFF(DAY, DATE(A.CREATED_AT), DATE('2018-07-23') ) END TENURE_FUTURO,
 CASE WHEN A.DELETED_AT > @SNAPSHOT THEN 1 ELSE 0 END AS CHURN_FUTURO


FROM
	Z_BASE_DONATIONS A
LEFT JOIN 
	Z_BASE_CAMPAIGNS B
ON A.CAMPAIGN_ID = B.ID
LEFT JOIN 
	Z_BASE_ORGANIZATIONS C
ON B.ORGANIZATION_ID = C.ID
LEFT JOIN 
	Z_BASE_PAYMENT_TRANSACTIONS_RATIOS D
ON A.ID = D.DONATION_ID
LEFT JOIN
	Z_BASE_PAYMENT_TRANSACTIONS E
	ON A.ID = E.DONATION_ID
LEFT JOIN
	Z_BASE_DONORS F
	ON A.DONOR_ID = F.ID
LEFT JOIN 
	Z_BASE_ANALYTICS_CAT_REFERRAL G
	ON B.ID = G.CAMPAIGN_ID
LEFT JOIN
	Z_BASE_USERS_NVL_ORGANIZACION H
	ON C.ID = H.ORGANIZATION_ID
LEFT JOIN
	Z_BASE_SHARES_NIVEL_CAMPANIA I
	ON B.ID = I.CAMPAIGN_ID
LEFT JOIN 
	Z_PREPROCESS_TAGS_NIVEL_ONG J
ON C.ID = J.ORGANIZATION_ID
LEFT JOIN 
	Z_BASE_PAYMENT_TRANSACTIONS_PAGOS_FECHAS K
ON A.ID = K.DONATION_ID
LEFT JOIN
	Z_BASE_DONANTES M
ON F.ID = M.DONOR_ID
LEFT JOIN
	Z_BASE_Q_DISINTOS_METHODS_POR_DONACION N
ON A.ID = N.DONATION_ID
LEFT JOIN
	Z_PREPROCESS_DONORS_REPETIDOS O
ON M.DONOR_ID = O.ID
LEFT JOIN 
	Z_BASE_PAYMENT_TRANSACTIONS_PAGOS_REJECTED_FECHAS P
ON A.ID = P.DONATION_ID
LEFT JOIN 
	Z_BASE_CARD_METHOD Q
ON A.ID = Q.DONATION_ID
WHERE 
	AND O.ID IS NULL;
    -- AND E.AMOUNT_APPROVED IS NOT NULL;

# DATASET EXPORT
SELECT * FROM Z_TRAIN;

# VALIDATION SET EXPORT
SELECT * FROM Z_VALIDATION;

